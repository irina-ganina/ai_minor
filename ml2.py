# -*- coding: utf-8 -*-
"""ml2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17e7RWTCp86fL6-eTqPmsYS44QpXXlJIb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.dummy import DummyClassifier
from sklearn.metrics import accuracy_score, classification_report
import warnings
warnings.filterwarnings("ignore")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
train = pd.read_csv('/content/train_data.csv')
test = pd.read_csv('/content/test_data.csv')
sam_sub = pd.read_csv('/content/sample_submission_data.csv')

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
categorical_cols = train.select_dtypes(include=['object']).columns.intersection(test.columns)
for col in categorical_cols:
    train[col].fillna(train[col].mode()[0], inplace=True)
    test[col].fillna(test[col].mode()[0], inplace=True)

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
numeric_cols = [col for col in train.select_dtypes(include=['float64', 'int64']).columns if col in test.columns]

train[numeric_cols] = train[numeric_cols].fillna(train[numeric_cols].mean())
test[numeric_cols] = test[numeric_cols].fillna(test[numeric_cols].mean())

test.isnull().sum()

train.isnull().sum()

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
train = pd.get_dummies(train, drop_first=True)
test = pd.get_dummies(test, drop_first=True)
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–º–µ–µ—Ç —Ç–µ –∂–µ –∫–æ–ª–æ–Ω–∫–∏, —á—Ç–æ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π
test = test.reindex(columns=train.columns, fill_value=0)
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
X = train.drop('Depression', axis=1)
y = train['Depression']

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

"""ü§ñ Model Building (using DummyClassifier and XGBoost)

"""

# 1. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
most_frequent_class = y_train.mode()[0]
y_pred_constant = [most_frequent_class] * len(y_val)
accuracy_constant = accuracy_score(y_val, y_pred_constant)
print(f'Accuracy of constant prediction: {accuracy_constant}')

# 2. –ë–µ–π–∑–ª–∞–π–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å DummyClassifier
# –Ø –≤—ã–±—Ä–∞–ª–∞ DummyClassifier, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'most_frequent', —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –∫–ª–∞—Å—Å.
dummy_model = DummyClassifier(strategy='most_frequent', random_state=42)
dummy_model.fit(X_train, y_train)
y_pred_dummy = dummy_model.predict(X_val)

# 3. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ DummyClassifier
accuracy_dummy = accuracy_score(y_val, y_pred_dummy)
print(f'Accuracy of DummyClassifier: {accuracy_dummy}')
print("\nClassification Report for DummyClassifier:\n", classification_report(y_val, y_pred_dummy))

# 4. –û–±—É—á–µ–Ω–∏–µ XGBClassifier (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å)
xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')

xgb_model.fit(X_train, y_train)

y_pred_xgb = xgb_model.predict(X_val)

print("Accuracy:", accuracy_score(y_val, y_pred_xgb))
print("\nClassification Report:\n", classification_report(y_val, y_pred_xgb))
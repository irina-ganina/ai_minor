# -*- coding: utf-8 -*-
"""ml1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k5oAJo035uz3l0cIK2IoZ_gXF1x7OUs2
"""

print("""
Бизнес-постановка задачи - реализовать предктивную модель наличия депрессии по характеристикам человека, таких как возраст, пол, уровень стресса, социальный статус и другие факторы. Это позволит медицинским учреждениям и специалистам в области психического здоровья более эффективно выявлять людей, нуждающихся в помощи, и разрабатывать целенаправленные программы поддержки.
ML-задача: бинарная классификация, наличие депрессии (положительный класс) или отсутствие депрессии (отрицательный класс)
Набор данных train_data / test_data / sample_submission_data находятся в папке с файлом
Для оценки качества модели мы будем использовать F1-score как основную метрику. F1-score является важной метрикой для задач бинарной классификации, особенно когда классы несбалансированы (а у нас может быть большинство пользователей без депрессии). Она учитывает как точность (precision), так и полноту (recall), что позволяет более точно оценить качество модели в контексте предсказания депрессии, где важно не только правильно идентифицировать людей с депрессией, но и минимизировать количество ложных срабатываний.
""")

# Провести EDA на своих данных

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

train = pd.read_csv('train_data.csv')

print("Первые пять строк")
print(train.head())

print("Общая информация")
train.info()

print("Проверка пропусков")
print(train.isnull().sum())

print("Проверка дубликатов", train.duplicated().sum())

plt.figure(figsize=(18,12))
plt.title("Visualizing Missing Values")
sns.heatmap(train.isnull(), cbar=False, yticklabels=False);

# Комментариии
# Пропуски связаны со статусом человека. Например у студентов отсутсвует работа
# В рамках построения ML необходимо будет почистить данных

plt.figure(figsize=(6, 4))
sns.countplot(data=train, y='Depression')

# Комментариии
# Более 80% пользователей не имеют депрессию

plt.figure(figsize=(6, 5))
sns.histplot(data=train, x='Working Professional or Student', hue='Depression', multiple='stack', shrink=0.8)
plt.show()

# Комментариии
# Предварительно студенты более подтверждены к депрессии

# Convert age into categorical bins
train['Age Group'] = pd.cut(train['Age'], bins=[20, 30, 40, 50, 60], labels=['20-30', '30-40', '40-50', '50-60'])

# Stacked bar chart
plt.figure(figsize=(8, 5))
sns.histplot(data=train, x='Age Group', hue='Depression', multiple='stack', shrink=0.8)
plt.title('Age Group vs Depression')
plt.show()

plt.figure(figsize=(6, 5))
sns.histplot(data=train, x='Gender', hue='Depression', multiple='stack', shrink=0.8)
plt.title('Gender vs Depression')
plt.show()

# Filter professionals only (excluding students)
professionals = train.dropna(subset=["Profession", "Work Pressure"])

# Select the top 10 most common professions
top_10_professions = professionals["Profession"].value_counts().nlargest(10).index
top_professionals = professionals[professionals["Profession"].isin(top_10_professions)]

# Compute the average stress level and depression rate per profession
profession_stats = top_professionals.groupby("Profession").agg(
    Avg_Stress=("Work Pressure", "mean"),
    Depression_Rate=("Depression", lambda x: x.mean() * 100)  # Depression percentage
).reset_index()

# Heatmap
plt.figure(figsize=(10, 6))
heatmap_data = profession_stats.set_index("Profession")
sns.heatmap(heatmap_data, cmap="coolwarm", annot=True, fmt=".1f")

plt.title("Stress & Depression Rate in Top 10 Professions")
plt.show()

# Комментариии
# Следующим шагом стоит провести анализ корреляций